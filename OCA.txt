1/ An abstract class does not have to implement any of the abstract method of super
2/ Impossible declaration: "abstract final", "private abstract"
3/ Interface is 100% abstract
4/ default vs protected:
	> default : visible only inside the same package, EVEN THROUGH inheritence
	> protected: visible inside the same package and subclasses even outside package
5/ Override : Redefinir / Overload : Surcharger
6/ You can't override a public method and make it private (Can't reduce visibility)
7/ Abstract method can only be protected or public
8/ Overriding a method:
	> Return type and throwed exception : Same or Sub Type or NONE
	> Argument type : Same 
	> Access level : same or less restrictive
9/ int e#; //<<Illegal>>
10/ ENUM can NOT be declared inside a method
11/ Inheritance advantages:
	> Code reuse
	> Polymorphism (Dynamic binding)
12/ Overload a method : 
	> MUST change arguments in Number OR in types
	> It is the "reference type" which determine the method that will be called in runtime (NOT the object type)
13/ Names:
	> Arguments : When method is in-use
	> Parameters: In method signature
14/ Overload vs. Override : Page 115
15/ Access Modifier : Page 39
16/ Casting:
	> Downcast (Super->Sub) : Must be explicit
	> Upcast (Sub->Super) : Can be implicit
17/ Variable memory location:
	> Heap  : Instance variables + Objects
	> Stack : Local variables
18/ Primitive default values: Page 203
19/ Arrays:
	> int [][] myArray = new int[3][]; // putting 3 is enough
	> int i = some1DArry[3]; //if some1DArry is not initialized, so RuntimeException
	> int [] array1D = new int[3]{1,2,3} //Error, can not specify size when using inline declaration
20/ Order of initialization block (Page 236):
	> (1) Static init block
	> (2) instance int block
	> (3) constructor
	> Example: Suppose class Cat extends Animal:
		1- All static Init blocks in Animal and Cat
		2- Super() (Animal constructor)
		3- Init block of Cat
		4- Cat constructor
	> Bare in mind that static initialization blocks run ONCE
21/ Wrappers (Recap table 243) : 
	> integerInstance.xxxValue() : To convert Wrapper to Primitive (Unwrap)
	> Integer.parseInt(String) : To convert String to Primitive (Generally: Wrapper.parsePrimitive(String))
	> Integer.valueOf(String) : To convert String to Wrapper
22/ Overloaded method call:
	> Widening over Boxing
	> Older style over new style (with var-args)
	> Can not widen wrappers (e.g. from Integer to Long)
23/ Eligible for Garbage Collector (Inaccessible for any live thread):
	> Instance = null
	> Unreturned local variables of a method
	> Island of isolation
	> Can manually call GC: System.gc(); or Runtime.getRuntime.gc();
24/ Default primitive values:
	> Class variables : Yes
	> Method variables : No
26/ Shadowing: Variables with the same name but different scopes 
27/ (& |) vs. (&& ||)
	> First one Always evaluates both operands
	> Same result
	> & and | can also be used in bitwise comparison
28/ Comparing char -> Comparing Unicode
29/ How to break for loop:
	> break
	> return
	> system.exit(0) //shutdown the JVM
	> throw exception
30/ Try...Catch...Finally
	> Execution stops in try block whenever an exception is catched
	> We can also throw exception in catch exception
	> Finally block always executes EVEN if try contains return !!!!!!
	> Finally block executes With and Without exception
	> Unreachable catch block !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
31/ Assertions:
	> Assertions are disabled by default. To enable it : "java -ea TestClass"
	> Possibility of enable/disable assertion in specific packages: "java -ea -da:com.some.package"
	> If old code with "assert" as identifier => MUST recompile source using "-source 1.3" flag
	> Assertions introduced in 1.4
	> When assert with-two args is used, the second must return a value, example:
		* OK: assert(i==1): j=2;
		* KO: assert(b > 2): doStuff(); //doStuff() return void
32/ Recap of : Flow control, Exceptions, Assertions : Page 394
33/ Switch(A):
	> A should be a constant
	> A can be : String, int, short, byte, char or enum
34/ Java IO:
	> Creating a file:
		* File file = new File("myFile.txt"); //No file has been created yet
		* boolean b = file.createNewFile //Now yes
	> Creating a directory:
		* File dir = new File("NewDirectory");
		* dir.mkdir();
		* Can't delete a directory if not empty
35/ Serialization:
	> transient => not Serializable
	> Used when serializing : private void writeObject(ObjectOutputStream os){...}
	> Used when de-serializing : private void readObject(ObjectInputStream is){...}
	> When de-serializing an object we DON'T run any type of initialization BECAUSE we want to restore the object state
	> When serializing an Array or Collection, All elements should be serializable, else Failure
	> Can not serialize a class which has a member that is not serializable. Throws Exception. (Page 537) 
36/ Date/Time manipulation (Page 478):
	> cal.add(Calendar.HOUR, -4); //Subtracting 4 hours from cal
	> add vs. roll (roll does not affect larger part, example: adding 3 hours to 23h will not increment days, But "add" do increment it)
	> Calendar and DateFormat are abstract (No new)
	> Date d = df.parse(str); => throws ParseException
	> Local loc = new Local("it", "CH"); //Local("Language", "Country") => Summary table: 487
37/ Read/write:
	> flush() method only in writer
	> readPassword() in console class returns char[] (NOT String)
38/ Formatting:
	> NumberFormat.parse() => MUST be in try-catch
39/ A == B returns true ONLY if A and B point to the same object in the Heap
40/ Collections: 
	> Map does not implement Collection
	> HashSet : Unordered + Unsorted
	> LinkedHashSet : Ordered + Unsorted
	> HashTable : Unordered (Synchronized)
	> ArrayList ~ Vector (synchronized, thread-safe)
	> HashMap ~ HashTable (synchronized, thread-safe)
	> HashMap allows: One null key / Multiple null values
	> Review Table : Page 565
41/ Searching Arrays/Collections:
	> IMPORTANT: Arrays and Collections should be SORTED before searching a value, Example:
		* 1- Arrays.sort(stringArray, ReverseComparator); // asc
		* 2- Arrays.binarySearch(stringArray, "one"); //-1 if not found, its index if found
	> Be aware of two misleading situations:
		* Searching an unsorted array or collection
		* Using different Comparators for sorting and searching 
	> if Arrays.binarySearch is not given the same comparator used to sort the array so result "-1" or "Undefined result" (equivalent)
42/ Hashcode():
	> Do not use transient in hashcode()
	> Hashcode/Equals contract : If Two objects are equals then they SHOULD have same hashcode
	> It is optimal to override hashcode when using HashXxxx collections
	> If a class overrides equals, it MUST overrides hashcode too.
	> The more unique hash codes a formula will creates, the faster the retrieval will be
	> 2 steps used when getting an element in HashMap, first find the corresponding hashcode (bucket) then uses equals to find the corresponding element
	> If hashcode is not overriden, the HashMap can not detect duplicate objects (those with "equals" true). Same as when equals is not overriden (just 
	  hachcode) and =! object with same properties
43/ Methods which create Backed Collections:
	> TreeSet: headSet(), tailSet(), subSet() => (Returns NavigableSet)
	> TreeMap: headMap(), tailMap(), subMap() => (Returns NavigableSet)
	> The original and backed collection are correlated (changes in one reflected in the other)
44/ Arrays and Collections : Summary table page 593
45/ Methods of Arrays and Collections: Summary table page 594
	> Important PriorityQueue methods are : offer(...) (to add), peak() (to retrieve top element) and poll (to retrieve+remove top element)
46/ String natural order : Space -> Uppercase -> Lowercase
47/ Generics:
	> Introduced in Java 1.5
	> Collections without generics : unsafe type warning
	> Compiler type protection
	> With wildcard:
		* <? extends Animal> and <? extends Runnable> //extends class or interface (not implement Runnable: Error)
		* <? super Cat>
		* <?> different from <Object>
48/ if "public class TestComparator implements Comparable<TestComparator>"{...}
	then @Override public int compareTo(TestComparator o){...}
	NOT @Override public int compareTo(Object o){...} 
49/ Inner Classes
	> Types of Inner classes:
		* Regular
		* Static
		* Method-specific : Can only be instantiated and used within the same method (of course after inner class declaration)
		* Anonymous (Example System.out.println(new MyInterface() {  ...  });)
	> new MyOuter().new MyInner(); or outerObjRef.new MyInner();
	> Two flavours of anonymous inner classes:
		* Anonymous "subclass" of the specified type
		* Anonymous "implementer" of the specified interface
50/ Generics:
	> Generics are rarely used outside of collections
	> public class NumberHolder<?> { } // NO
	> public class NumberHolder<? extends Number> { } // NO: replace '?' by T
	> List<Animal> aList = new ArrayList<Dog>(); //NO: Animal and Dog Should be the same (even inheritance relationship not permitted)
	> All the generic type information is removed during compilation
	> If we use List<? extends Animal> in a method parameter SO CANN'T ADD anything inside that method
	> If we use List<? super Dog> in a method parameter SO NO PROBLEM with ADD
	> We can't use a class's generic type parameters in static methods or static fields
51/ The check of type compatibility for:
			-> Arrays : is runtime check (hence the presence of ArrayStoreException at runtime)
			-> Lists  : is compile time check (hence the absence of any runtime exception)
52/ Thread
	1/	Creating a new Thread: (1) By extending Thread or (2) implementing Runnable
	2/	IMPORTANT: wait(), notify(),  and notifyAll()  must be called from within a synchronized context! A thread can't invoke a wait or notify method on an 
		object unless it owns that object's lock.
	3/	Five Thread states:
			1. New (Before calling the start() method)
			2. Runnable (When calling the start(). When single-processor machine only one thread is in runnable state)
			3. Running
			4. Blocked/Waiting/Sleeping (By calling wait(), sleep() or join(), or can't acquire the lock)
			5. Dead (Thread can not be restarted)
	4/	RuntimeException if multiple call of start()
	5/	If a high priority thread starts, the JVM will pause the low priority running thread and put the high priority
	6/  sleep() must be in try catch (InterruptedException [Checked])
	7/	join() must be in try catch (It throws InterruptedException)
	8/	IllegalMonitorStateExcption : Unchecked
	9/	IMPORTANT: Cannot call wait() on an object before acquiring the lock on this object (Otherwise IllegalMonitorStateExcption)
